#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import torch
import pandas as pd
import numpy as np
from functools import reduce
import pdb
from featurizer.functions.split import *


###############
# 2d Data (for split() and split_sample())
###############

np.random.seed(520)
data2d_np = np.random.randn(11,3).round(2)

'''
>>> data2d_np

array([[-1.41, -0.28, -0.03],
       [-0.3 , -1.31,  1.08],
       [-0.16, -0.57, -0.61],
       [-0.61, -0.66, -0.07],
       [-0.04, -0.47,  1.73],
       [ 1.56, -0.31, -1.44],
       [-0.01, -0.42, -0.89],
       [-0.68, -0.95, -0.97],
       [-0.1 ,  0.49, -0.48],
       [ 0.45, -0.63, -0.25],
       [ 0.01,  1.92, -0.68]])
'''

############################# Expected output for split() ##############################
#################
# Case 1:
# the most basic scenario, where step = 1
#################
# data_list_split_basic = split(data2d_np, window=8, step=1, offset = 0, keep_tail=False)
expected_list_split_basic = [np.array([[-1.41, -0.28, -0.03],
                                       [-0.3 , -1.31,  1.08],
                                       [-0.16, -0.57, -0.61],
                                       [-0.61, -0.66, -0.07],
                                       [-0.04, -0.47,  1.73],
                                       [ 1.56, -0.31, -1.44],
                                       [-0.01, -0.42, -0.89],
                                       [-0.68, -0.95, -0.97]]),
                             np.array([[-0.3 , -1.31,  1.08],
                                       [-0.16, -0.57, -0.61],
                                       [-0.61, -0.66, -0.07],
                                       [-0.04, -0.47,  1.73],
                                       [ 1.56, -0.31, -1.44],
                                       [-0.01, -0.42, -0.89],
                                       [-0.68, -0.95, -0.97],
                                       [-0.1 ,  0.49, -0.48]]),
                             np.array([[-0.16, -0.57, -0.61],
                                       [-0.61, -0.66, -0.07],
                                       [-0.04, -0.47,  1.73],
                                       [ 1.56, -0.31, -1.44],
                                       [-0.01, -0.42, -0.89],
                                       [-0.68, -0.95, -0.97],
                                       [-0.1 ,  0.49, -0.48],
                                       [ 0.45, -0.63, -0.25]]),
                             np.array([[-0.61, -0.66, -0.07],
                                       [-0.04, -0.47,  1.73],
                                       [ 1.56, -0.31, -1.44],
                                       [-0.01, -0.42, -0.89],
                                       [-0.68, -0.95, -0.97],
                                       [-0.1 ,  0.49, -0.48],
                                       [ 0.45, -0.63, -0.25],
                                       [ 0.01,  1.92, -0.68]])]

##############
# Case 2:
# step = 2; expect a smaller sized last list
##############
# data_list_split_2steps = split(data2d_np, window=8, step=2, offset = 0, keep_tail=False)
expected_list_split_2steps = [np.array([[-1.41, -0.28, -0.03],
                                        [-0.3 , -1.31,  1.08],
                                        [-0.16, -0.57, -0.61],
                                        [-0.61, -0.66, -0.07],
                                        [-0.04, -0.47,  1.73],
                                        [ 1.56, -0.31, -1.44],
                                        [-0.01, -0.42, -0.89],
                                        [-0.68, -0.95, -0.97]]),
                             np.array([[-0.16, -0.57, -0.61],
                                       [-0.61, -0.66, -0.07],
                                       [-0.04, -0.47,  1.73],
                                       [ 1.56, -0.31, -1.44],
                                       [-0.01, -0.42, -0.89],
                                       [-0.68, -0.95, -0.97],
                                       [-0.1 ,  0.49, -0.48],
                                       [ 0.45, -0.63, -0.25]]),
                             np.array([[ 0.01,  1.92, -0.68]])]

################
# Case 3:
# keep_tail = True, while other parameters unchanged; expect a smaller sized first list
################
# data_list_split_kepttail = split(data2d_np, window=8, step=2, offset = 0, keep_tail=True)
expected_list_split_kepttail = [np.array([[-1.41, -0.28, -0.03]]),
                                np.array([[-0.3 , -1.31,  1.08],
                                          [-0.16, -0.57, -0.61],
                                          [-0.61, -0.66, -0.07],
                                          [-0.04, -0.47,  1.73],
                                          [ 1.56, -0.31, -1.44],
                                          [-0.01, -0.42, -0.89],
                                          [-0.68, -0.95, -0.97],
                                          [-0.1 ,  0.49, -0.48]]),
                                np.array([[-0.61, -0.66, -0.07],
                                          [-0.04, -0.47,  1.73],
                                          [ 1.56, -0.31, -1.44],
                                          [-0.01, -0.42, -0.89],
                                          [-0.68, -0.95, -0.97],
                                          [-0.1 ,  0.49, -0.48],
                                          [ 0.45, -0.63, -0.25],
                                          [ 0.01,  1.92, -0.68]])]

#################
# Case 4:
# offset = 2; expect one less list than if offset = 0
#################
# data_list_split_2offset = split(data2d_np, window=8, step=2, offset = 2, keep_tail=False)
expected_list_split_2offset = [np.array([[-0.16, -0.57, -0.61],
                                         [-0.61, -0.66, -0.07],
                                         [-0.04, -0.47,  1.73],
                                         [ 1.56, -0.31, -1.44],
                                         [-0.01, -0.42, -0.89],
                                         [-0.68, -0.95, -0.97],
                                         [-0.1 ,  0.49, -0.48],
                                         [ 0.45, -0.63, -0.25]]),
                               np.array([[ 0.01,  1.92, -0.68]])]


############################# Expected output for split_sample() ##############################

# parameters consistent across tests for split_sample() and split_sample3d()
window_sample, step_sample, offset_sample = 5, 3, 1

##################
# Case 1:
# keep_tail = False, merge_remain = True
##################
# data_list_split_sample_FT = split_sample(data2d_np, window=window_sample, step=step_sample, offset=offset_sample, keep_tail=False, merge_remain=True)
expected_list_split_sample_FT = [np.array([[-0.3 , -1.31,  1.08],
                                           [-0.16, -0.57, -0.61],
                                           [-0.61, -0.66, -0.07],
                                           [-0.04, -0.47,  1.73],
                                           [ 1.56, -0.31, -1.44]]),
                                 np.array([[-0.04, -0.47,  1.73],
                                           [ 1.56, -0.31, -1.44],
                                           [-0.01, -0.42, -0.89],
                                           [-0.68, -0.95, -0.97],
                                           [-0.1 ,  0.49, -0.48],
                                           [ 0.45, -0.63, -0.25],
                                           [ 0.01,  1.92, -0.68]])]

##################
# Case 2:
# keep_tail = False, merge_remain = False
##################
# data_list_split_sample_FT = split_sample(data2d_np, window=window_sample, step=step_sample, offset=offset_sample, keep_tail=False, merge_remain=False)
expected_list_split_sample_FF = [np.array([[-0.3 , -1.31,  1.08],
                                           [-0.16, -0.57, -0.61],
                                           [-0.61, -0.66, -0.07],
                                           [-0.04, -0.47,  1.73],
                                           [ 1.56, -0.31, -1.44]]),
                                 np.array([[-0.04, -0.47,  1.73],
                                           [ 1.56, -0.31, -1.44],
                                           [-0.01, -0.42, -0.89],
                                           [-0.68, -0.95, -0.97],
                                           [-0.1 ,  0.49, -0.48]])]

##################
# Case 3:
# keep_tail = True, merge_remain = True
##################
# data_list_split_sample_TT = split_sample(data2d_np, window=window_sample, step=step_sample, offset=offset_sample, keep_tail=True, merge_remain=True)
expected_list_split_sample_TT = [np.array([[-0.3 , -1.31,  1.08],
                                           [-0.16, -0.57, -0.61],
                                           [-0.61, -0.66, -0.07],
                                           [-0.04, -0.47,  1.73],
                                           [ 1.56, -0.31, -1.44],
                                           [-0.01, -0.42, -0.89],
                                           [-0.68, -0.95, -0.97]]),
                                 np.array([[-0.01, -0.42, -0.89],
                                           [-0.68, -0.95, -0.97],
                                           [-0.1 ,  0.49, -0.48],
                                           [ 0.45, -0.63, -0.25],
                                           [ 0.01,  1.92, -0.68]])]

##################
# Case 4:
# keep_tail = True, merge_remain = False
##################
# data_list_split_sample_TF = split_sample(data2d_np, window=window_sample, step=step_sample, offset=offset_sample, keep_tail=True, merge_remain=False)
expected_list_split_sample_TF = [np.array([[-0.61, -0.66, -0.07],
                                           [-0.04, -0.47,  1.73],
                                           [ 1.56, -0.31, -1.44],
                                           [-0.01, -0.42, -0.89],
                                           [-0.68, -0.95, -0.97]]),
                                 np.array([[-0.01, -0.42, -0.89],
                                           [-0.68, -0.95, -0.97],
                                           [-0.1 ,  0.49, -0.48],
                                           [ 0.45, -0.63, -0.25],
                                           [ 0.01,  1.92, -0.68]])]


########################################## 
##########################################
##################
# 3d data (for split3d() and split_sample3d())
##################
data3d_np_half = np.expand_dims(data2d_np, axis = 0)
data3d_np = np.vstack((data3d_np_half, data3d_np_half))
'''
>>> data3d_np

array([[[-1.41, -0.28, -0.03],
        [-0.3 , -1.31,  1.08],
        [-0.16, -0.57, -0.61],
        [-0.61, -0.66, -0.07],
        [-0.04, -0.47,  1.73],
        [ 1.56, -0.31, -1.44],
        [-0.01, -0.42, -0.89],
        [-0.68, -0.95, -0.97],
        [-0.1 ,  0.49, -0.48],
        [ 0.45, -0.63, -0.25],
        [ 0.01,  1.92, -0.68]],

       [[-1.41, -0.28, -0.03],
        [-0.3 , -1.31,  1.08],
        [-0.16, -0.57, -0.61],
        [-0.61, -0.66, -0.07],
        [-0.04, -0.47,  1.73],
        [ 1.56, -0.31, -1.44],
        [-0.01, -0.42, -0.89],
        [-0.68, -0.95, -0.97],
        [-0.1 ,  0.49, -0.48],
        [ 0.45, -0.63, -0.25],
        [ 0.01,  1.92, -0.68]]])
'''

############################# Expected output for split3d() ##############################
# test logic is identical to split()

##################
# Case 1:
# the most basic scenario, where step = 1
##################
# data_list_split3d_basic = split3d(data3d_np, window=8, step=1, offset=0, keep_tail=False, dim=1)

expected_list_split3d_basic = [np.array([[[-1.41, -0.28, -0.03],
                                          [-0.3 , -1.31,  1.08],
                                          [-0.16, -0.57, -0.61],
                                          [-0.61, -0.66, -0.07],
                                          [-0.04, -0.47,  1.73],
                                          [ 1.56, -0.31, -1.44],
                                          [-0.01, -0.42, -0.89],
                                          [-0.68, -0.95, -0.97]],
                                 
                                         [[-1.41, -0.28, -0.03],
                                          [-0.3 , -1.31,  1.08],
                                          [-0.16, -0.57, -0.61],
                                          [-0.61, -0.66, -0.07],
                                          [-0.04, -0.47,  1.73],
                                          [ 1.56, -0.31, -1.44],
                                          [-0.01, -0.42, -0.89],
                                          [-0.68, -0.95, -0.97]]]),
                               np.array([[[-0.3 , -1.31,  1.08],
                                          [-0.16, -0.57, -0.61],
                                          [-0.61, -0.66, -0.07],
                                          [-0.04, -0.47,  1.73],
                                          [ 1.56, -0.31, -1.44],
                                          [-0.01, -0.42, -0.89],
                                          [-0.68, -0.95, -0.97],
                                          [-0.1 ,  0.49, -0.48]],
                                 
                                         [[-0.3 , -1.31,  1.08],
                                          [-0.16, -0.57, -0.61],
                                          [-0.61, -0.66, -0.07],
                                          [-0.04, -0.47,  1.73],
                                          [ 1.56, -0.31, -1.44],
                                          [-0.01, -0.42, -0.89],
                                          [-0.68, -0.95, -0.97],
                                          [-0.1 ,  0.49, -0.48]]]),
                               np.array([[[-0.16, -0.57, -0.61],
                                          [-0.61, -0.66, -0.07],
                                          [-0.04, -0.47,  1.73],
                                          [ 1.56, -0.31, -1.44],
                                          [-0.01, -0.42, -0.89],
                                          [-0.68, -0.95, -0.97],
                                          [-0.1 ,  0.49, -0.48],
                                          [ 0.45, -0.63, -0.25]],
                                 
                                         [[-0.16, -0.57, -0.61],
                                          [-0.61, -0.66, -0.07],
                                          [-0.04, -0.47,  1.73],
                                          [ 1.56, -0.31, -1.44],
                                          [-0.01, -0.42, -0.89],
                                          [-0.68, -0.95, -0.97],
                                          [-0.1 ,  0.49, -0.48],
                                          [ 0.45, -0.63, -0.25]]]),
                               np.array([[[-0.61, -0.66, -0.07],
                                          [-0.04, -0.47,  1.73],
                                          [ 1.56, -0.31, -1.44],
                                          [-0.01, -0.42, -0.89],
                                          [-0.68, -0.95, -0.97],
                                          [-0.1 ,  0.49, -0.48],
                                          [ 0.45, -0.63, -0.25],
                                          [ 0.01,  1.92, -0.68]],
                                 
                                         [[-0.61, -0.66, -0.07],
                                          [-0.04, -0.47,  1.73],
                                          [ 1.56, -0.31, -1.44],
                                          [-0.01, -0.42, -0.89],
                                          [-0.68, -0.95, -0.97],
                                          [-0.1 ,  0.49, -0.48],
                                          [ 0.45, -0.63, -0.25],
                                          [ 0.01,  1.92, -0.68]]])]
       
##############
# Case 2:
# step = 2; expect a smaller sized last list
##############     
# data_list_split3d_2steps = split3d(data3d_np, window=8, step=2, offset = 0, keep_tail=False)
expected_list_split3d_2steps = [np.array([[[-1.41, -0.28, -0.03],
                                           [-0.3 , -1.31,  1.08],
                                           [-0.16, -0.57, -0.61],
                                           [-0.61, -0.66, -0.07],
                                           [-0.04, -0.47,  1.73],
                                           [ 1.56, -0.31, -1.44],
                                           [-0.01, -0.42, -0.89],
                                           [-0.68, -0.95, -0.97]],
                                    
                                          [[-1.41, -0.28, -0.03],
                                           [-0.3 , -1.31,  1.08],
                                           [-0.16, -0.57, -0.61],
                                           [-0.61, -0.66, -0.07],
                                           [-0.04, -0.47,  1.73],
                                           [ 1.56, -0.31, -1.44],
                                           [-0.01, -0.42, -0.89],
                                           [-0.68, -0.95, -0.97]]]),
                                
                                np.array([[[-0.16, -0.57, -0.61],
                                           [-0.61, -0.66, -0.07],
                                           [-0.04, -0.47,  1.73],
                                           [ 1.56, -0.31, -1.44],
                                           [-0.01, -0.42, -0.89],
                                           [-0.68, -0.95, -0.97],
                                           [-0.1 ,  0.49, -0.48],
                                           [ 0.45, -0.63, -0.25]],
                                    
                                          [[-0.16, -0.57, -0.61],
                                           [-0.61, -0.66, -0.07],
                                           [-0.04, -0.47,  1.73],
                                           [ 1.56, -0.31, -1.44],
                                           [-0.01, -0.42, -0.89],
                                           [-0.68, -0.95, -0.97],
                                           [-0.1 ,  0.49, -0.48],
                                           [ 0.45, -0.63, -0.25]]]),
                                
                                np.array([[[ 0.01,  1.92, -0.68]],
                                    
                                          [[ 0.01,  1.92, -0.68]]])]

################
# Case 3:
# keep_tail = True, while other parameters unchanged; expect a smaller sized first list
################
# data_list_split3d_kepttail = split3d(data3d_np, window=8, step=2, offset = 0, keep_tail=True)
expected_list_split3d_kepttail = [np.array([[[-1.41, -0.28, -0.03]],
 
                                            [[-1.41, -0.28, -0.03]]]),
                                  
                                  np.array([[[-0.3 , -1.31,  1.08],
                                             [-0.16, -0.57, -0.61],
                                             [-0.61, -0.66, -0.07],
                                             [-0.04, -0.47,  1.73],
                                             [ 1.56, -0.31, -1.44],
                                             [-0.01, -0.42, -0.89],
                                             [-0.68, -0.95, -0.97],
                                             [-0.1 ,  0.49, -0.48]],
                                     
                                            [[-0.3 , -1.31,  1.08],
                                             [-0.16, -0.57, -0.61],
                                             [-0.61, -0.66, -0.07],
                                             [-0.04, -0.47,  1.73],
                                             [ 1.56, -0.31, -1.44],
                                             [-0.01, -0.42, -0.89],
                                             [-0.68, -0.95, -0.97],
                                             [-0.1 ,  0.49, -0.48]]]),
                                  
                                  np.array([[[-0.61, -0.66, -0.07],
                                             [-0.04, -0.47,  1.73],
                                             [ 1.56, -0.31, -1.44],
                                             [-0.01, -0.42, -0.89],
                                             [-0.68, -0.95, -0.97],
                                             [-0.1 ,  0.49, -0.48],
                                             [ 0.45, -0.63, -0.25],
                                             [ 0.01,  1.92, -0.68]],
                                     
                                            [[-0.61, -0.66, -0.07],
                                             [-0.04, -0.47,  1.73],
                                             [ 1.56, -0.31, -1.44],
                                             [-0.01, -0.42, -0.89],
                                             [-0.68, -0.95, -0.97],
                                             [-0.1 ,  0.49, -0.48],
                                             [ 0.45, -0.63, -0.25],
                                             [ 0.01,  1.92, -0.68]]])]

#################
# Case 4:
# offset = 2; expect one less list than if offset = 0
#################
# data_list_split3d_2offset = split3d(data3d_np, window=8, step=2, offset = 2, keep_tail=False)
expected_list_split3d_2offset = [np.array([[[-0.16, -0.57, -0.61],
                                            [-0.61, -0.66, -0.07],
                                            [-0.04, -0.47,  1.73],
                                            [ 1.56, -0.31, -1.44],
                                            [-0.01, -0.42, -0.89],
                                            [-0.68, -0.95, -0.97],
                                            [-0.1 ,  0.49, -0.48],
                                            [ 0.45, -0.63, -0.25]],
                                    
                                           [[-0.16, -0.57, -0.61],
                                            [-0.61, -0.66, -0.07],
                                            [-0.04, -0.47,  1.73],
                                            [ 1.56, -0.31, -1.44],
                                            [-0.01, -0.42, -0.89],
                                            [-0.68, -0.95, -0.97],
                                            [-0.1 ,  0.49, -0.48],
                                            [ 0.45, -0.63, -0.25]]]),
                                 
                                 np.array([[[ 0.01,  1.92, -0.68]],
                                    
                                           [[ 0.01,  1.92, -0.68]]])]

############################# Expected output for split_sample3d() ##############################
# test logic is identical to split3d()

##################
# Case 1:
# keep_tail = False, merge_remain = True
##################
data_list_split_sample3d_FT = split_sample3d(data3d_np, window=window_sample, step=step_sample, offset=offset_sample, keep_tail=False, merge_remain=True)
expected_list_split_sample3d_FT = [np.array([[[-0.3 , -1.31,  1.08],
                                              [-0.16, -0.57, -0.61],
                                              [-0.61, -0.66, -0.07],
                                              [-0.04, -0.47,  1.73],
                                              [ 1.56, -0.31, -1.44]],
                                             
                                             [[-0.3 , -1.31,  1.08],
                                              [-0.16, -0.57, -0.61],
                                              [-0.61, -0.66, -0.07],
                                              [-0.04, -0.47,  1.73],
                                              [ 1.56, -0.31, -1.44]]]),
                                             
                                   np.array([[[-0.04, -0.47,  1.73],
                                              [ 1.56, -0.31, -1.44],
                                              [-0.01, -0.42, -0.89],
                                              [-0.68, -0.95, -0.97],
                                              [-0.1 ,  0.49, -0.48],
                                              [ 0.45, -0.63, -0.25],
                                              [ 0.01,  1.92, -0.68]],
                                            
                                             [[-0.04, -0.47,  1.73],
                                              [ 1.56, -0.31, -1.44],
                                              [-0.01, -0.42, -0.89],
                                              [-0.68, -0.95, -0.97],
                                              [-0.1 ,  0.49, -0.48],
                                              [ 0.45, -0.63, -0.25],
                                              [ 0.01,  1.92, -0.68]]])]

##################
# Case 2:
# keep_tail = False, merge_remain = False
##################
# data_list_split_sample3d_FF = split_sample3d(data3d_np, window=window_sample, step=step_sample, offset=offset_sample, keep_tail=False, merge_remain=False)
expected_list_split_sample3d_FF = [np.array([[[-0.3 , -1.31,  1.08],
                                              [-0.16, -0.57, -0.61],
                                              [-0.61, -0.66, -0.07],
                                              [-0.04, -0.47,  1.73],
                                              [ 1.56, -0.31, -1.44]],
                                             
                                             [[-0.3 , -1.31,  1.08],
                                              [-0.16, -0.57, -0.61],
                                              [-0.61, -0.66, -0.07],
                                              [-0.04, -0.47,  1.73],
                                              [ 1.56, -0.31, -1.44]]]),
                                   
                                   np.array([[[-0.04, -0.47,  1.73],
                                              [ 1.56, -0.31, -1.44],
                                              [-0.01, -0.42, -0.89],
                                              [-0.68, -0.95, -0.97],
                                              [-0.1 ,  0.49, -0.48]],
                                              
                                             [[-0.04, -0.47,  1.73],
                                              [ 1.56, -0.31, -1.44],
                                              [-0.01, -0.42, -0.89],
                                              [-0.68, -0.95, -0.97],
                                              [-0.1 ,  0.49, -0.48]]])]

##################
# Case 3:
# keep_tail = True, merge_remain = True
##################
# data_list_split_sample3d_TT = split_sample3d(data3d_np, window=window_sample, step=step_sample, offset=offset_sample, keep_tail=True, merge_remain=True)
expected_list_split_sample3d_TT = [np.array([[[-0.3 , -1.31,  1.08],
                                            [-0.16, -0.57, -0.61],
                                            [-0.61, -0.66, -0.07],
                                            [-0.04, -0.47,  1.73],
                                            [ 1.56, -0.31, -1.44],
                                            [-0.01, -0.42, -0.89],
                                            [-0.68, -0.95, -0.97]],
                                           
                                           [[-0.3 , -1.31,  1.08],
                                            [-0.16, -0.57, -0.61],
                                            [-0.61, -0.66, -0.07],
                                            [-0.04, -0.47,  1.73],
                                            [ 1.56, -0.31, -1.44],
                                            [-0.01, -0.42, -0.89],
                                            [-0.68, -0.95, -0.97]]]),
                                 np.array([[[-0.01, -0.42, -0.89],
                                            [-0.68, -0.95, -0.97],
                                            [-0.1 ,  0.49, -0.48],
                                            [ 0.45, -0.63, -0.25],
                                            [ 0.01,  1.92, -0.68]],
                                           
                                           [[-0.01, -0.42, -0.89],
                                            [-0.68, -0.95, -0.97],
                                            [-0.1 ,  0.49, -0.48],
                                            [ 0.45, -0.63, -0.25],
                                            [ 0.01,  1.92, -0.68]]])]

##################
# Case 4:
# keep_tail = True, merge_remain = False
##################
# data_list_split_sample3d_TF = split_sample3d(data3d_np, window=window_sample, step=step_sample, offset=offset_sample, keep_tail=True, merge_remain=False)
expected_list_split_sample3d_TF = [np.array([[[-0.61, -0.66, -0.07],
                                              [-0.04, -0.47,  1.73],
                                              [ 1.56, -0.31, -1.44],
                                              [-0.01, -0.42, -0.89],
                                              [-0.68, -0.95, -0.97]],
                                             [[-0.61, -0.66, -0.07],
                                              [-0.04, -0.47,  1.73],
                                              [ 1.56, -0.31, -1.44],
                                              [-0.01, -0.42, -0.89],
                                              [-0.68, -0.95, -0.97]]]),
                                   np.array([[[-0.01, -0.42, -0.89],
                                              [-0.68, -0.95, -0.97],
                                              [-0.1 ,  0.49, -0.48],
                                              [ 0.45, -0.63, -0.25],
                                              [ 0.01,  1.92, -0.68]],
                                              
                                             [[-0.01, -0.42, -0.89],
                                              [-0.68, -0.95, -0.97],
                                              [-0.1 ,  0.49, -0.48],
                                              [ 0.45, -0.63, -0.25],
                                              [ 0.01,  1.92, -0.68]]])]


##################### Expected outputs from these split related functions when input is tensor ##################
def list_of_np_to_ts(lnp):
    lts = []
    for n in lnp:
        lts.append(torch.tensor(n))
    return lts

# create input ts data
data2d_ts = torch.tensor(data2d_np)
data3d_ts = torch.tensor(data3d_np)

# ------------- split() -------------
# data_list_split_ts = split(data2d_ts, window=8, step=2, offset = 2, keep_tail=False)
expected_list_split_ts = list_of_np_to_ts(expected_list_split_2offset)

# ------------- split_sample() -------------
# data_list_split_sample_ts = split_sample(data2d_ts, window=window_sample, step=step_sample, offset = offset_sample, keep_tail=False, merge_remain=False)
expected_list_split_sample_ts = list_of_np_to_ts(expected_list_split_sample_FF)

# ------------- split3d() -------------
# data_list_split_sample3d_ts = split3d(data3d_ts, window=8, step=2, offset = 0, keep_tail=True)
expected_list_split3d_ts = list_of_np_to_ts(expected_list_split3d_kepttail)

# ------------- split_sample3d() -------------
# data_list_split_sample3d_ts = split_sample3d(data3d_ts, window=window_sample, step=step_sample, offset = offset_sample, keep_tail=True, merge_remain=True)
expected_list_split_sample3d_ts = list_of_np_to_ts(expected_list_split_sample3d_TT)




